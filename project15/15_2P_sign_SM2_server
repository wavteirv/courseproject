import socket
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import serialization, hashes, hmac
from cryptography.hazmat.primitives.asymmetric import utils

# 生成服务器端的SM2密钥对
server_private_key = ec.generate_private_key(ec.SECP256R1())
server_public_key = server_private_key.public_key()

def sm2_sign(private_key, message):
    signature = private_key.sign(
        message.encode(),
        utils.Prehashed(hashes.SHA256())
    )
    return signature

def verify_signature(public_key, message, signature):
    try:
        public_key.verify(
            signature,
            message.encode(),
            utils.Prehashed(hashes.SHA256())
        )
        return True
    except:
        return False

# 创建TCP/IP socket
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_address = ('localhost', 8888)
server_socket.bind(server_address)

# 开始监听
server_socket.listen(1)

while True:
    print("等待客户端连接...")
    client_socket, client_address = server_socket.accept()

    try:
        print("接收到客户端连接：", client_address)

        # 接收消息
        data = client_socket.recv(1024)
        message = data.decode()
        print("接收到消息：", message)

        # 对消息进行签名
        signature = sm2_sign(server_private_key, message)
        print("服务器签名：", signature.hex())

        # 发送签名回客户端
        client_socket.sendall(signature)

    finally:
        client_socket.close()
