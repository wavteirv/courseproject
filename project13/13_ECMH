import random
import hashlib
from ecpy.curves import Point

def inv_mod(b, p):
    if b < 0 or p <= b:
        b = b % p
    c, d = b, p
    uc, vc, ud, vd, temp = 1, 0, 0, 1, 0
    while c != 0:
        temp = c
        q, c, d = d // c, d % c, temp
        uc, vc, ud, vd = ud - q * uc, vd - q * vc, uc, vc

    assert d == 1
    if ud > 0:
        return ud
    else:
        return ud + p


def leftmost_bit(x):
    assert x > 0
    result = 1
    while result <= x:
        result = 2 * result
    return result // 2


class CurveFp(object):

    def __init__(self, p, a, b):
        # 标识椭圆曲线方程y^2=x^3+ax+b mod p
        self.p = p
        self.a = a
        self.b = b

    def contains_point(self, x, y):
        return (y * y - (x * x * x + self.a * x + self.b)) % self.p == 0


class Point(object):

    def __init__(self, curve, x, y, order=None):

        self.curve = curve
        self.x = x
        self.y = y
        self.order = order
        # self.curve is allowed to be None only for INFINITY:
        if self.curve:
            assert self.curve.contains_point(x, y)
        if order:
            assert self * order == INFINITY

    def __eq__(self, other):
        if self.curve == other.curve \
                and self.x == other.x \
                and self.y == other.y:
            return True
        else:
            return False

    def __add__(self, other):
        if other == INFINITY:
            return self
        if self == INFINITY:
            return other
        assert self.curve == other.curve

        if self.x == other.x:
            if (self.y + other.y) % self.curve.p == 0:
                return INFINITY
            else:
                return self.double()

        p = self.curve.p
        l = ((other.y - self.y) * \
             inv_mod(other.x - self.x, p)) % p

        x3 = (l * l - self.x - other.x) % p
        y3 = (l * (self.x - x3) - self.y) % p

        return Point(self.curve, x3, y3)

    def __mul__(self, other):
        # 点乘数
        e = other
        if self.order:
            e = e % self.order
        if e == 0:
            return INFINITY
        if self == INFINITY:
            return INFINITY

        e3 = 3 * e
        negative_self = Point(self.curve, self.x, -self.y, self.order)
        i = leftmost_bit(e3) // 2
        result = self

        while i > 1:
            result = result.double()
            if (e3 & i) != 0 and (e & i) == 0:
                result = result + self
            if (e3 & i) == 0 and (e & i) != 0:
                result = result + negative_self
            i = i // 2
        return result

    def __rmul__(self, other):
        # 数乘点
        return self * other


    def double(self):
        if self == INFINITY:
            return INFINITY

        p = self.curve.p
        a = self.curve.a
        l = ((3 * self.x * self.x + a) * \
             inv_mod(2 * self.y, p)) % p

        x3 = (l * l - 2 * self.x) % p
        y3 = (l * (self.x - x3) - self.y) % p

        return Point(self.curve, x3, y3)

    def invert(self):
        if self.y is None:
            return Point(None, None, None)
        return Point(self.curve, self.x, -self.y % self.curve.p)


INFINITY = Point(None, None, None)

n = 0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123
p = 0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF
g_X = 0x32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7
g_Y = 0xbc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0
a = 0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC
b = 0x28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93

E = CurveFp(p, a, b)
G = Point(E, g_X, g_Y)


def int2str(n):
    return "{:064x}".format(n)


class C:
    def __init__(self, a, b):
        self.a = a
        self.b = b


def Cmul(a, n, p, i1, i2):
    c = a * a - n
    t = C((i1.a * i2.a + i1.b * i2.b % p * c) % p, (i1.b * i2.a + i1.a * i2.b) % p)
    return t


def Cpow(a, n, p, x, y):
    z = C(1, 0)
    while y:
        if y & 1:
            z = Cmul(a, n, p, z, x)
        x = Cmul(a, n, p, x, x)
        y >>= 1
    return z


# 欧拉准则判断二次剩余
def legendre(a, p):
    return pow(a, (p - 1) // 2, p)


def Cipolla(n, p):
    while True:
        a = random.randint(0, p - 1)
        if legendre(a * a - n, p) == p - 1:
            break
    u = C(a, 1)
    u = Cpow(a, n, p, u, (p + 1) // 2)
    # 平方根存在两个解，且一定为y和p-y的形式(y<p/2)。为保证hash值唯一性，取较大的一个。
    if u.a < p // 2:
        u.a = p - u.a
    return u.a % p


def Hash(msg):
    # 将单个点使用md5映射到椭圆曲线点的横坐标
    x = int(hashlib.sha256(msg.encode()).hexdigest(), 16) % p
    temp = x ** 3 + a * x + b
    while legendre(temp, p) != 1:
        x += 1
        temp = x ** 3 + a * x + b
    y = Cipolla(temp, p)
    return Point(E, x, y)


def setHash(s):
    P = Hash(s[0])
    for msg in s[1:]:
        P += Hash(msg)
    return P


def printPoint(P):
    print(hex(P.x), hex(P.y))


s1 = ['test1']
s2 = ['test2']
s3 = ['test3']
s12 = s1 + s2
s = ['test1', 'test2', 'test3']
printPoint(setHash(s))
printPoint(setHash(s1 + s2 + s3))
printPoint(setHash(s12 + s3))
