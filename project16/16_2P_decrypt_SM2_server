from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
import os
import socket

# 使用SM2私钥解密数据
def decrypt_with_sm2(private_key, ciphertext):
    plaintext = private_key.decrypt(ciphertext, ec.ECIES(hashes.SHA256()))
    return plaintext

if __name__ == "__main__":
    # 生成SM2密钥对
    private_key, public_key = generate_sm2_key_pair()

    # 建立网络通信
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('127.0.0.1', 12345))
    server_socket.listen(1)
    print('等待连接...')
    conn, addr = server_socket.accept()
    print('连接已建立')

    # 接收加密后的数据
    data = conn.recv(4096)

    # 解密数据
    decrypted_message = decrypt_with_sm2(private_key, data)

    print("解密后:", decrypted_message)

    # 关闭连接
    conn.close()
